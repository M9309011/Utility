// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TOHU.Toolbox.Utility_UT.Utility.AOP
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class 提供函式橫切需求建立Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "提供函式橫切需求建立.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "提供函式橫切需求建立", @"	提供使用者可自訂橫切需求。

	橫切需求區分為函式執行前及函式執行後兩類。

	◆ 橫向需求套用步驟：

		1. 使用者先實做介面以自訂執行內容。
			
			◇ 函式執行前：TOHU.Toolbox.Utility.AOP.IPreProcessor

			◇ 函式執行後：TOHU.Toolbox.Utility.AOP.IPostProcessor

		2. 然後再需要的函式前加上 Attribute 標籤。
			
			◇ 函式執行前： [TOHU.Toolbox.Utility.AOP.PreProcess(typeof( [PreProcessor] ))]

			◇ 函式執行後： [TOHU.Toolbox.Utility.AOP.PostProcess(typeof( [PostProcessor] ))]", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "提供函式橫切需求建立")))
            {
                TOHU.Toolbox.Utility_UT.Utility.AOP.提供函式橫切需求建立Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 20
#line 21
 testRunner.Given("清空呼叫佇列", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
  testRunner.And("建立包含橫向需求方法的類別實體", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("函式未包含橫向需求")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "提供函式橫切需求建立")]
        public virtual void 函式未包含橫向需求()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("函式未包含橫向需求", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line 25
 testRunner.When("執行未指定橫向需求的方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CallStack"});
            table1.AddRow(new string[] {
                        "DoSomething"});
#line 26
 testRunner.Then("呼叫佇列儲存的執行順序是", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("函式標示執行前橫向需求")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "提供函式橫切需求建立")]
        public virtual void 函式標示執行前橫向需求()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("函式標示執行前橫向需求", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line 31
 testRunner.When("執行標示執行前橫向需求的方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CallStack"});
            table2.AddRow(new string[] {
                        "PreProcess"});
            table2.AddRow(new string[] {
                        "DoSomething"});
#line 32
 testRunner.Then("呼叫佇列儲存的執行順序是", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("函式標示執行後橫向需求")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "提供函式橫切需求建立")]
        public virtual void 函式標示執行後橫向需求()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("函式標示執行後橫向需求", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line 38
 testRunner.When("執行標示執行後橫向需求的方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CallStack"});
            table3.AddRow(new string[] {
                        "DoSomething"});
            table3.AddRow(new string[] {
                        "PostProcess"});
#line 39
 testRunner.Then("呼叫佇列儲存的執行順序是", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("函式標示執行前及執行後橫向需求")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "提供函式橫切需求建立")]
        public virtual void 函式標示執行前及執行後橫向需求()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("函式標示執行前及執行後橫向需求", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line 45
 testRunner.When("執行標示執行前及執行後橫向需求的方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CallStack"});
            table4.AddRow(new string[] {
                        "PreProcess"});
            table4.AddRow(new string[] {
                        "DoSomething"});
            table4.AddRow(new string[] {
                        "PostProcess"});
#line 46
 testRunner.Then("呼叫佇列儲存的執行順序是", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
