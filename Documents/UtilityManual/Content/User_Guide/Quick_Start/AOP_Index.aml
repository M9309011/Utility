<?xml version="1.0" encoding="utf-8"?>
<topic id="40428e9d-d670-41d0-a63d-3be08e2fddb4" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>本文說明如何快速建立剖面導向應用。</para>
      <para>在剖面導向應用中，有兩個部分要處理，首先是要建立剖面導向應用處理器，例如歷程記錄，例外處理的處理邏輯；再來就是會採用剖面導向應用的類別要進行設定，分別說明如下。</para>
      <definitionTable>
        <definedTerm>建立剖面應用處理類別</definedTerm>
        <definition>
          <para>
            依據剖面導向應用是在函式執行前或是執行後，分別實做不同介面，可以參考 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP_UT.PreProcessor</codeEntityReference> 或 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP_UT.PostProcessor</codeEntityReference> 類別。
          </para>
          <list class="bullet">
            <listItem>
              <para>
                <application>執行前：</application>實做 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP.IPreProcessor</codeEntityReference> 介面。
              </para>
            </listItem>
            <listItem>
              <para>
                <application>執行後：</application>實做 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP.IPostProcessor</codeEntityReference> 介面。
              </para>
            </listItem>
          </list>
        </definition>
        <definedTerm>設定剖面導向應用類別</definedTerm>
        <definition>
          <para>
            有下述兩部分應該要注意，可以參考 可以參考 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP_UT.ContextTarget</codeEntityReference>
          </para>
          <list class="bullet">
            <listItem>
              <para>
                類別要繼承自 <codeEntityReference>T:System.ContextBoundObject</codeEntityReference> 類別。
              </para>
            </listItem>
            <listItem>
              <para>
                套用剖面導向應用的函式要標注 <codeEntityReference>T:TOHU.Toolbox.Utility.AOP.InterceptAttribute</codeEntityReference> 並給定處理器型別。
              </para>
            </listItem>
          </list>
        </definition>
      </definitionTable>
    </introduction>
   
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>